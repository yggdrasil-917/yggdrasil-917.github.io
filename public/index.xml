<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tempest Engine Dev</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Tempest Engine Dev</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Jun 2024 07:28:57 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Serialization</title>
      <link>http://localhost:1313/posts/serialization/serialization/</link>
      <pubDate>Thu, 27 Jun 2024 07:28:57 -0700</pubDate>
      <guid>http://localhost:1313/posts/serialization/serialization/</guid>
      <description>Table of Contents Pupping Text Pupping Binary Pupping Random Thoughts Pupping The method used for serialization in Tempest is referred to as pupping or pup which stands for pack-unpack. I first heard about this method close to a decade ago but the idea of it stuck with me. That idea is fairly simple. Rather than creating serilization and deserialization functions for each object type we instead create pupper objects for each type of medium bundled with a set of read and write functions for each fundamental data type.</description>
    </item>
    <item>
      <title>Asset System</title>
      <link>http://localhost:1313/posts/asset-system/asset-system/</link>
      <pubDate>Wed, 26 Jun 2024 08:40:45 -0700</pubDate>
      <guid>http://localhost:1313/posts/asset-system/asset-system/</guid>
<<<<<<< Updated upstream
      <description>Table of Contents Assets AssetLifetime AssetRegistry Cooking CookOnTheFly OfflineCooking Assets The Tempest engine, like most other engines out there, has a concept of an asset along with an asset manager that can handle asset lifetimes as well as asset cooking. The engine contains a base class that all asset types derive from. A simplified version of that Asset base class is below.&#xA;struct AssetHandle { // This contains the unique path to the asset, stored as a string // and a hash value of that path evaluated at compile time using constexpr.</description>
=======
      <description>Assets AssetLifetime AssetRegistry Cooking CookOnTheFly OfflineCooking Assets The Tempest engine, like most other engines out there, has a concept of an asset along with an asset manager that can handle asset lifetimes as well as asset cooking. The engine contains a base class that all asset types derive from. A simplified version of that Asset base class is below.&#xA;struct AssetHandle { // This contains the unique path to the asset, stored as a string // and a hash value of that path evaluated at compile time using constexpr.</description>
>>>>>>> Stashed changes
    </item>
    <item>
      <title>Tempest Engine</title>
      <link>http://localhost:1313/posts/tempest-engine/tempest-engine/</link>
      <pubDate>Sun, 23 Jun 2024 06:40:54 -0700</pubDate>
      <guid>http://localhost:1313/posts/tempest-engine/tempest-engine/</guid>
<<<<<<< Updated upstream
      <description>Table of Contents Introduction Why Build A New Engine Pros Cons Conclusion Introduction About two years ago I had started building a new engine in C++ with the initial intention of having some base framework I could experiment with and also challenging myself to build a proper game editor since I had yet to do that. I had built a few engines in the past but it was always with the intention of learning more things so I generally avoided using third party libraries.</description>
=======
      <description>Introduction Why Build A New Engine Pros Cons Conclusion Introduction About two years ago I had started building a new engine in C++ with the initial intention of having some base framework I could experiment with and also challenging myself to build a proper game editor since I had yet to do that. I had built a few engines in the past but it was always with the intention of learning more things so I generally avoided using third party libraries.</description>
>>>>>>> Stashed changes
    </item>
    <item>
      <title>About This Site</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Fri, 21 Jun 2024 13:47:59 -0700</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>My name is Xavi and I&amp;rsquo;m the lead rendering engineer at Magnopus. Previously worked in the game industry doing a bit of everything on the programming side before focusing on engine development.&#xA;This site is here to blog about the Tempest engine&amp;rsquo;s development progress.</description>
    </item>
  </channel>
</rss>

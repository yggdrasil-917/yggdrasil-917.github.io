<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tempest Engine Dev</title>
    <link>https://yggdrasil-917.github.io/</link>
    <description>Recent content on Tempest Engine Dev</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Aug 2024 17:41:30 -0700</lastBuildDate>
    <atom:link href="https://yggdrasil-917.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Localizing Text</title>
      <link>https://yggdrasil-917.github.io/posts/localizing-text/localizing-text/</link>
      <pubDate>Sun, 04 Aug 2024 17:41:30 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/localizing-text/localizing-text/</guid>
      <description>Localization is one of those things many people in game dev talk about but there doesn&amp;rsquo;t seem to be a consensus on whether it is valuable to do in your games. For every presentation or post-mortem talking about the benefits of it and how it was key to their success you can find an equal number stating it didn&amp;rsquo;t help. With that in mind, I&amp;rsquo;m not entirely sure if I will localize all the text in the game I&amp;rsquo;m making but that doesn&amp;rsquo;t mean that I did not make a system for localization just in case I do decide to do so.</description>
    </item>
    <item>
      <title>Game UI</title>
      <link>https://yggdrasil-917.github.io/posts/game-ui/game-ui/</link>
      <pubDate>Fri, 02 Aug 2024 16:12:16 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/game-ui/game-ui/</guid>
      <description>UI Requirements Logic Updates Rendering Stitching Triangle Strips 9-Slicing Sprite Basic Rich Text Support Localization Frosted Glass Look Creating GUI Content Limitations Examples The Tempest engine has support for two UI systems. It makes heavy use of Dear ImGui for the editor UI and the in-game debug console but there is also a custom UI system made to handle the game&amp;rsquo;s UI needs. As great as Dear ImGui is, you will rarely see it used in released titles, at least not as the main system behind a game&amp;rsquo;s UI.</description>
    </item>
    <item>
      <title>Scriptable Entity</title>
      <link>https://yggdrasil-917.github.io/posts/scriptable-entity/scriptable-entity/</link>
      <pubDate>Sat, 27 Jul 2024 17:58:27 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/scriptable-entity/scriptable-entity/</guid>
      <description>The Entity class is the base class in Tempest used for anything that can exist in the scene. This is comparable to the GameObject class in Unity or the Actor class in Unreal. Unlike the GameObject class in Unity however, entities do not require a transform component in order to exist in the scene. The class itself is very simple. All it has is an entity handle and a pointer to the scene that owns the entity.</description>
    </item>
    <item>
      <title>Interlaced Rendering</title>
      <link>https://yggdrasil-917.github.io/posts/interlaced-rendering/interlaced-rendering/</link>
      <pubDate>Fri, 26 Jul 2024 11:20:44 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/interlaced-rendering/interlaced-rendering/</guid>
      <description>What Is It Why Use It Implementation Deinterlacing Performance Final Thoughts What Is It A more common name might be interlaced video. The idea originates decades ago in the TV industry where companies wanted to save on bandwidth. To quote Wikipedia, the interlaced signal contains two images of a video frame captured consecutively which enhances motion perception to the viewer, and reduces flicker by taking advantage of the characteristics of the human visual system.</description>
    </item>
    <item>
      <title>Tempest Engine Loop</title>
      <link>https://yggdrasil-917.github.io/posts/tempest-engine-loop/tempest-engine-loop/</link>
      <pubDate>Wed, 24 Jul 2024 20:30:08 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/tempest-engine-loop/tempest-engine-loop/</guid>
      <description>The previous post did an in-depth look into how a Tempest frame is put together on the GPU. In this post I would like to do the same but looking at things from the CPU side. Essentially we will dive into what the engine loop does to create a brand new frame.&#xA;This time around we will look at a new scene in the middle of a combat scenario playing out as more things will happen on the CPU than the rendering test scene we looked at previously.</description>
    </item>
    <item>
      <title>Tempest Gpu Frame</title>
      <link>https://yggdrasil-917.github.io/posts/tempest-gpu-frame/tempest-gpu-frame/</link>
      <pubDate>Sun, 21 Jul 2024 08:54:06 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/tempest-gpu-frame/tempest-gpu-frame/</guid>
      <description>Shadows Phase Depth Phase PreLighting Phase Lighting Phase ImGui Phase NVidia NSight Preview This post will go over one of the rendering test scenes and we&amp;rsquo;ll see the steps the Tempest engine takes on the GPU to render a frame. The engine has its own editor separate from the player executable, which is what is shipped to people. The editor does pretty much the same thing the player does plus a few editor only rendering tasks so the scene we will analyze is actually running in the editor.</description>
    </item>
    <item>
      <title>Decals</title>
      <link>https://yggdrasil-917.github.io/posts/decals/decals/</link>
      <pubDate>Mon, 15 Jul 2024 18:11:49 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/decals/decals/</guid>
      <description>Tempest GBuffer How They Work Sampling Stencil Sort Order Batch Rendering GBuffer Modidfication Unique Applications Performance There are a couple of different ways to implement decals, each with their pros and cons. For this post I&amp;rsquo;ll go over how Tempest implements screen space deferred decals to modify the gbuffer in various ways. Decals tend to offer very easy ways to modify the scene while keeping shader complexity at a manageable level but at the cost of additional draw calls to render the decals.</description>
    </item>
    <item>
      <title>Scripting With Cpp</title>
      <link>https://yggdrasil-917.github.io/posts/scripting-with-cpp/scripting-with-cpp/</link>
      <pubDate>Wed, 03 Jul 2024 11:57:54 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/scripting-with-cpp/scripting-with-cpp/</guid>
      <description>Early on in Tempest&amp;rsquo;s development it was decided not to adopt a scripting language and instead use c++, the same language used to make the engine. This more or less goes against the norm these days seeing as how most engines have a scripting language. In fact, you can probably count the number of professional engines that only offer c++ for scripting in one hand. Unreal Engine being by far the most popular one in that category.</description>
    </item>
    <item>
      <title>Crash Reporting</title>
      <link>https://yggdrasil-917.github.io/posts/crash-reporting/crash-reporting/</link>
      <pubDate>Sun, 30 Jun 2024 10:21:04 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/crash-reporting/crash-reporting/</guid>
      <description>Supporting Minidumps Crash Report Win32 UI Trigger Crash Reporter Where Reports Live If you&amp;rsquo;ve ever had to debug a fatal exception then you likely know how hard it can be to fix those issues when you only have the steps to reproduce the problem and sometimes you don&amp;rsquo;t even have that. These days a lot of things can contribute to a crash and it&amp;rsquo;s important to get as much information as you can.</description>
    </item>
    <item>
      <title>Shader Compiler</title>
      <link>https://yggdrasil-917.github.io/posts/shader-compiler/shader-compiler/</link>
      <pubDate>Sat, 29 Jun 2024 09:27:15 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/shader-compiler/shader-compiler/</guid>
      <description>Editor Integration Shader Cache Hot Reloading Tempest Shader These days every game engine out there is going to need to compile shaders but how they go about it tends to be somewhat different depending on the engine&amp;rsquo;s needs. At the time of this writing Tempest only supports the Windows platform and supports DirectX 12 and Vulkan. The compiler uses the dxc executable under the hood to compile for both DX12 and Vulkan.</description>
    </item>
    <item>
      <title>Serialization</title>
      <link>https://yggdrasil-917.github.io/posts/serialization/serialization/</link>
      <pubDate>Thu, 27 Jun 2024 07:28:57 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/serialization/serialization/</guid>
      <description>Pupping Text Pupping Binary Pupping Random Thoughts Pupping The method used for serialization in Tempest is referred to as pupping or pup which stands for pack-unpack. I first heard about this method close to a decade ago but the idea of it stuck with me. That idea is fairly simple. Rather than creating serilization and deserialization functions for each object type we instead create pupper objects for each type of medium bundled with a set of read and write functions for each fundamental data type.</description>
    </item>
    <item>
      <title>Asset System</title>
      <link>https://yggdrasil-917.github.io/posts/asset-system/asset-system/</link>
      <pubDate>Wed, 26 Jun 2024 08:40:45 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/asset-system/asset-system/</guid>
      <description>Assets AssetLifetime AssetRegistry Cooking CookOnTheFly OfflineCooking Assets The Tempest engine, like most other engines out there, has a concept of an asset along with an asset manager that can handle asset lifetimes as well as asset cooking. The engine contains a base class that all asset types derive from. A simplified version of that Asset base class is below.&#xA;struct AssetHandle { // This contains the unique path to the asset, stored as a string // and a hash value of that path evaluated at compile time using constexpr.</description>
    </item>
    <item>
      <title>Tempest Engine</title>
      <link>https://yggdrasil-917.github.io/posts/tempest-engine/tempest-engine/</link>
      <pubDate>Sun, 23 Jun 2024 06:40:54 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/tempest-engine/tempest-engine/</guid>
      <description>Introduction Why Build A New Engine Pros Cons Conclusion Introduction About two years ago I had started building a new engine in C++ with the initial intention of having some base framework I could experiment with and also challenging myself to build a proper game editor since I had yet to do that. I had built a few engines in the past but it was always with the intention of learning more things so I generally avoided using third party libraries.</description>
    </item>
    <item>
      <title>About This Site</title>
      <link>https://yggdrasil-917.github.io/about/</link>
      <pubDate>Fri, 21 Jun 2024 13:47:59 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/about/</guid>
      <description>My name is Xavi and I&amp;rsquo;m the lead rendering engineer at Magnopus. Previously worked in the game industry doing a bit of everything on the programming side before focusing on engine development.&#xA;This site is here to blog about the Tempest engine&amp;rsquo;s development progress.</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rendering on Tempest Engine Dev</title>
    <link>https://yggdrasil-917.github.io/tags/rendering/</link>
    <description>Recent content in Rendering on Tempest Engine Dev</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Aug 2024 16:12:16 -0700</lastBuildDate>
    <atom:link href="https://yggdrasil-917.github.io/tags/rendering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Game UI</title>
      <link>https://yggdrasil-917.github.io/posts/game-ui/game-ui/</link>
      <pubDate>Fri, 02 Aug 2024 16:12:16 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/game-ui/game-ui/</guid>
      <description>The Tempest engine has support for two UI systems. It makes heavy use of Dear ImGui for the editor UI and the in-game debug console but there is also a custom UI system made to handle the game&amp;rsquo;s UI needs. As great as Dear ImGui is, you will rarely see it used in released titles, at least not as the main system behind a game&amp;rsquo;s UI. There are multiple reasons for it but in my opinion one of the big reasons is that it is not trivial to re-skin the UI elements.</description>
    </item>
    <item>
      <title>Interlaced Rendering</title>
      <link>https://yggdrasil-917.github.io/posts/interlaced-rendering/interlaced-rendering/</link>
      <pubDate>Fri, 26 Jul 2024 11:20:44 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/interlaced-rendering/interlaced-rendering/</guid>
      <description>What Is It Why Use It Implementation Deinterlacing Performance Final Thoughts What Is It A more common name might be interlaced video. The idea originates decades ago in the TV industry where companies wanted to save on bandwidth. To quote Wikipedia, the interlaced signal contains two images of a video frame captured consecutively which enhances motion perception to the viewer, and reduces flicker by taking advantage of the characteristics of the human visual system.</description>
    </item>
    <item>
      <title>Tempest Gpu Frame</title>
      <link>https://yggdrasil-917.github.io/posts/tempest-gpu-frame/tempest-gpu-frame/</link>
      <pubDate>Sun, 21 Jul 2024 08:54:06 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/tempest-gpu-frame/tempest-gpu-frame/</guid>
      <description>Shadows Phase Depth Phase PreLighting Phase Lighting Phase ImGui Phase NVidia NSight Preview This post will go over one of the rendering test scenes and we&amp;rsquo;ll see the steps the Tempest engine takes on the GPU to render a frame. The engine has its own editor separate from the player executable, which is what is shipped to people. The editor does pretty much the same thing the player does plus a few editor only rendering tasks so the scene we will analyze is actually running in the editor.</description>
    </item>
    <item>
      <title>Decals</title>
      <link>https://yggdrasil-917.github.io/posts/decals/decals/</link>
      <pubDate>Mon, 15 Jul 2024 18:11:49 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/decals/decals/</guid>
      <description>Tempest GBuffer How They Work Sampling Stencil Sort Order Batch Rendering GBuffer Modidfication Unique Applications Performance There are a couple of different ways to implement decals, each with their pros and cons. For this post I&amp;rsquo;ll go over how Tempest implements screen space deferred decals to modify the gbuffer in various ways. Decals tend to offer very easy ways to modify the scene while keeping shader complexity at a manageable level but at the cost of additional draw calls to render the decals.</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Engine on Tempest Engine Dev</title>
    <link>https://yggdrasil-917.github.io/tags/engine/</link>
    <description>Recent content in Engine on Tempest Engine Dev</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Jul 2024 20:30:08 -0700</lastBuildDate>
    <atom:link href="https://yggdrasil-917.github.io/tags/engine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tempest Engine Loop</title>
      <link>https://yggdrasil-917.github.io/posts/tempest-engine-loop/tempest-engine-loop/</link>
      <pubDate>Wed, 24 Jul 2024 20:30:08 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/tempest-engine-loop/tempest-engine-loop/</guid>
      <description>The previous post did an in-depth look into how a Tempest frame is put together on the GPU. In this post I would like to do the same but looking at things from the CPU side. Essentially we will dive into what the engine loop does to create a brand new frame.&#xA;This time around we will look at a new scene in the middle of a combat scenario playing out as more things will happen on the CPU than the rendering test scene we looked at previously.</description>
    </item>
    <item>
      <title>Scripting With Cpp</title>
      <link>https://yggdrasil-917.github.io/posts/scripting-with-cpp/scripting-with-cpp/</link>
      <pubDate>Wed, 03 Jul 2024 11:57:54 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/scripting-with-cpp/scripting-with-cpp/</guid>
      <description>Early on in Tempest&amp;rsquo;s development it was decided not to adopt a scripting language and instead use c++, the same language used to make the engine. This more or less goes against the norm these days seeing as how most engines have a scripting language. In fact, you can probably count the number of professional engines that only offer c++ for scripting in one hand. Unreal Engine being by far the most popular one in that category.</description>
    </item>
    <item>
      <title>Asset System</title>
      <link>https://yggdrasil-917.github.io/posts/asset-system/asset-system/</link>
      <pubDate>Wed, 26 Jun 2024 08:40:45 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/asset-system/asset-system/</guid>
      <description>Assets AssetLifetime AssetRegistry Cooking CookOnTheFly OfflineCooking Assets The Tempest engine, like most other engines out there, has a concept of an asset along with an asset manager that can handle asset lifetimes as well as asset cooking. The engine contains a base class that all asset types derive from. A simplified version of that Asset base class is below.&#xA;struct AssetHandle { // This contains the unique path to the asset, stored as a string // and a hash value of that path evaluated at compile time using constexpr.</description>
    </item>
    <item>
      <title>Tempest Engine</title>
      <link>https://yggdrasil-917.github.io/posts/tempest-engine/tempest-engine/</link>
      <pubDate>Sun, 23 Jun 2024 06:40:54 -0700</pubDate>
      <guid>https://yggdrasil-917.github.io/posts/tempest-engine/tempest-engine/</guid>
      <description>Introduction Why Build A New Engine Pros Cons Conclusion Introduction About two years ago I had started building a new engine in C++ with the initial intention of having some base framework I could experiment with and also challenging myself to build a proper game editor since I had yet to do that. I had built a few engines in the past but it was always with the intention of learning more things so I generally avoided using third party libraries.</description>
    </item>
  </channel>
</rss>
